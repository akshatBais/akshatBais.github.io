{"version":3,"sources":["SearchBox.js","ListBooks.js","BookInfo.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","book","React","createRef","handleChange","bind","assertThisInitialized","event","target","setState","_this2","react_default","a","createElement","className","type","ref","val","placeholder","onChange","Link","to","params","info","Component","ListBooks","data","bookName","count","getRequiredData","match","console","log","rep","request","JSON","parse","getBody","listBooks","map","key","id","_","parseInt","best_book","src","image_url","alt","title","BookInfo","authors","description","avg_rating","book_img","GoodreadsResponse","average_rating","_isMount","author","name","dangerouslySetInnerHTML","__html","App","BrowserRouter","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46492aa7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Link } from \"react-router-dom\";\r\nclass SearchBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    };\r\n    this.book = React.createRef();\r\n    this.handleChange = this.handleChange.bind(this);\r\n    //this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n    handleChange(event) {\r\n      this.book=event.target.value;\r\n      this.setState({value : this.book});\r\n    }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <div className=\"searchBox\">\r\n                <input className=\"textBox\" type=\"text\" ref={(val) => this.book = val}  placeholder=\"search books\" onChange={this.handleChange}/>\r\n                \r\n                <button>\r\n                  <Link to={ \"/listBooks/\" + this.state.value  }\r\n                  params = {{ info : this.state.value }}\r\n                  > Search\r\n                  </Link>\r\n              </button>\r\n            </div>\r\n        </header>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { parseString } from 'xml2js';\r\nimport { Link } from \"react-router-dom\";\r\nimport fetch from \"node-fetch\";\r\nimport request from 'sync-request';\r\n\r\nclass ListBooks extends React.Component{\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.data = {\r\n        bookName : '',\r\n        info : []\r\n      };\r\n      this.count = 0;\r\n\r\n      this.state = {\r\n        info : []\r\n      };\r\n      this.getRequiredData = this.getRequiredData.bind(this);\r\n\r\n    }\r\n\r\n  componentWillMount() {\r\n//    console.log(\"Calling Component will Mount method\");\r\n    if ( this.data.bookName !== this.props.match.params.info || this.data.bookName === '') {\r\n      this.getRequiredData();\r\n    }\r\n    this.data.bookName = this.props.match.params.info;\r\n  }\r\n\r\n\r\n  componentWillUpdate() {\r\n//    console.log(\"Calling componentWillUpdate method\");\r\n    console.log(\"Book keyword searched is : \"+this.props.match.params.info);\r\n    if ( this.data.bookName !== this.props.match.params.info || this.data.bookName === '') {\r\n      this.getRequiredData();\r\n    }\r\n    if(this.data.bookName !== this.props.match.params) {\r\n    this.data.bookName = this.props.match.params.info;\r\n    }\r\n\r\n  }\r\n\r\n  getRequiredData() {\r\n  //  console.log(\"Earlier and Current data : \"+this.data.bookName+\" and \"+this.props.match.params.info);\r\n      console.log(\"Getting the required details\");\r\n\r\n        var rep = request('GET','https://searchbookapp.herokuapp.com/getBooks?q='+this.props.match.params.info);\r\n        console.log(JSON.parse(rep.getBody()));\r\n        this.setState({info : JSON.parse(rep.getBody())});\r\n        console.log(this.state.info);\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\nconsole.log(this.state.info);\r\n    const listBooks = this.state.info.map((book) =>\r\n     <div  className=\"col-sm-3\" key={book.id[0]._}>\r\n            <div className=\"card\">\r\n                <Link to={\"/bookDetails/\"+ parseInt(book.best_book[0].id[0]._)}\r\n                params = {{\r\n                  info : parseInt(book.best_book[0].id[0]._)\r\n                }}\r\n                >\r\n                  <img className=\"card-img-top\" src={book.best_book[0].image_url} alt=\"no\"/>\r\n                  <h6 className=\"card-title\">\r\n                    {book.best_book[0].title}\r\n                  </h6>\r\n                </Link>\r\n            </div>\r\n      </div>\r\n\r\n  );\r\n\r\n      return (\r\n          <div className=\"row\">{listBooks}</div>\r\n      );\r\n  }\r\n}\r\n\r\n\r\nexport default ListBooks;\r\n","import React from \"react\";\r\nimport axios from 'axios';\r\nimport {parseString} from 'xml2js';\r\nimport request from 'sync-request';\r\n\r\nclass BookInfo extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data : '',\r\n      authors : [],\r\n      description : '',\r\n      avg_rating : '',\r\n      book_img : '',\r\n      bookName : ''\r\n\r\n    };\r\n\r\n    this.data = {\r\n      info : []\r\n    };\r\n\r\n  }\r\n\r\n\r\ncomponentWillMount() {\r\n  console.log(\"component will mount\");\r\n  console.log(\"Loading Data in getBookDescription\");\r\n  console.log(this.props.match.params.info);\r\n  var rep = request('GET','https://searchbookapp.herokuapp.com/getDetails?q='+parseInt(this.props.match.params.info));\r\n  this.data.info = JSON.parse(rep.getBody());\r\n  console.log(this.data.info);\r\n\r\n  this.setState({\r\n         authors : this.data.info.GoodreadsResponse.book[0].authors,\r\n         description :JSON.parse(rep.getBody()).GoodreadsResponse.book[0].description[0],\r\n         avg_rating : this.data.info.GoodreadsResponse.book[0].average_rating,\r\n         book_img : this.data.info.GoodreadsResponse.book[0].image_url[0],\r\n         bookName : this.data.info.GoodreadsResponse.book[0].title\r\n       });\r\n}\r\n\r\ncomponentDidMount() {\r\n  this._isMount = true;\r\n  console.log(\"Component is mounted\");\r\n}\r\n\r\ncomponentWillUnmount() {\r\n\r\nthis._isMount = false;\r\nconsole.log(\"component will unmount\");\r\n}\r\n  render() {\r\n    const authors = this.state.authors.map(author =>\r\n        <div className=\"authorName\">{author.author[0].name}</div>\r\n    )\r\n    console.log(\r\n      \"getting the information for book id : \" + parseInt(this.props.match.params.info)\r\n    );\r\n    return (\r\n  <div>\r\n    <div className=\"row\">\r\n        <div className=\"col-sm-4\">\r\n            <img className= \"book_img\" src={this.state.book_img} alt=\"book\"/>\r\n\r\n        </div>\r\n        <div className=\"col-sm-6\">\r\n        <br /><br />\r\n          <strong><h3>{this.state.bookName}</h3></strong>\r\n          <br />\r\n           by <b>  {authors} </b> <strong>Average Rating : </strong> {this.state.avg_rating}\r\n          <br /><br/>\r\n          <div className=\"bookDescription\" dangerouslySetInnerHTML={{ __html: this.state.description }} />\r\n\r\n        </div>\r\n    </div>\r\n  </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default BookInfo;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from './SearchBox';\nimport ListBooks from './ListBooks';\nimport BookInfo from './BookInfo';\n\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n\n\n\n  render () {\n    return (\n          <Router>\n          <div className=\"Home\">\n            <div className=\"welcome\">\n              <h1><strong>Welcome to <Link to=\"/home\">BetterReads !!</Link></strong></h1>\n            </div>\n            <div>\n              <Route path=\"/\" component = {SearchBox} />\n            </div>\n              <Route path=\"/listBooks/:info\" component = {ListBooks}   />\n              <Route path=\"/bookDetails/:info\" component = {BookInfo}   />\n\n\n            </div>\n          </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}