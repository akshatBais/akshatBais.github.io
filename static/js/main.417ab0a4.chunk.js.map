{"version":3,"sources":["SearchBox.js","ListBooks.js","BookInfo.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","book","React","createRef","handleChange","bind","assertThisInitialized","event","target","setState","react_default","a","createElement","className","type","ref","onChange","Link","to","params","info","Component","ListBooks","bookName","data","getData","console","log","match","_this2","axios","get","then","resp","parseString","err","result","GoodreadsResponse","search","results","work","listBooks","map","id","parseInt","_","src","best_book","image_url","alt","key","title","BookInfo","authors","description","avg_rating","book_img","getBookDescription","average_rating","author","name","App","BrowserRouter","src_SearchBox","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.417ab0a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Link } from \"react-router-dom\";\r\nclass SearchBox extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    };\r\n    this.book = React.createRef();\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n\r\n    handleChange(event) {\r\n      this.book=event.target.value;\r\n      this.setState({value : this.book});\r\n    }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <div className=\"searchBox\">\r\n             Welcome to BetterReads !! <br />Search the book <br /> <br />\r\n                <input type=\"text\" ref={this.book}  onChange={this.handleChange}/>\r\n              <button>\r\n                  <Link to={\r\n                    \"/listBooks/\" + this.state.value\r\n                  }\r\n                  params = {{\r\n                      info : this.book\r\n                    }}\r\n                  >\r\n                  Search\r\n                  </Link>\r\n              </button>\r\n            </div>\r\n        </header>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\nimport { parseString } from 'xml2js';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass ListBooks extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bookName : '',\r\n      data : '',\r\n      info : []\r\n    };\r\n    this.getData();\r\n  }\r\n\r\ncomponentDidMount() {\r\n  console.log( this.props.match.params.info);\r\n}\r\n\r\ngetData() {\r\n  axios.get('https://www.goodreads.com/search/index.xml?key=LsvXe6tyOcFzGePEMDiw&q='+ this.props.match.params.info)\r\n  .then(resp=> {\r\n    this.setState({data : resp.data});\r\n      parseString(this.state.data, (err, result) => {\r\n       this.setState({data : result});\r\n       this.setState({info  : this.state.data.GoodreadsResponse.search[0].results[0].work});\r\n       console.log(this.state.info);\r\n     });\r\n  });\r\n}\r\n\r\n\r\nrender() {\r\n\r\n  const listBooks = this.state.info.map((book) =>\r\n\r\n    <div id=\"BookDetails\" className=\"col-sm-4\">\r\n       <Link to={\"/bookDetails/\"+ parseInt(book.id[0]._)}\r\n       params = {{\r\n         info : parseInt(book.id[0]._)\r\n       }}\r\n       ><img src={book.best_book[0].image_url} alt=\"no\"/></Link>\r\n       <div className=\"bookTitle\" key={book.id}>{book.best_book[0].title}</div>\r\n    </div>\r\n\r\n);\r\n\r\n  return (\r\n\r\n      <div>{listBooks}</div>\r\n\r\n  );\r\n}\r\n\r\n}\r\n\r\n\r\nexport default ListBooks;\r\n","import React from \"react\";\r\nimport axios from 'axios';\r\nimport {parseString} from 'xml2js';\r\n\r\nclass BookInfo extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      data : '',\r\n      authors : [],\r\n      description : '',\r\n      avg_rating : '',\r\n      book_img : ''\r\n\r\n    };\r\n    this.getBookDescription();\r\n  }\r\n\r\ngetBookDescription() {\r\n  console.log(\"Loading Data\");\r\n  axios.get('https://www.goodreads.com/book/show/'+this.props.match.params.info+'.xml?key=LsvXe6tyOcFzGePEMDiw')\r\n  .then(resp=> {\r\n    console.log(resp);\r\n    this.setState({data : resp.data});\r\n      parseString(this.state.data, (err, result) => {\r\n        console.log(result);\r\n       this.setState({data : result});\r\n       this.setState({\r\n         authors : this.state.data.GoodreadsResponse.book[0].authors,\r\n         description : this.state.data.GoodreadsResponse.book[0].description,\r\n         avg_rating : this.state.data.GoodreadsResponse.book[0].average_rating\r\n       });\r\n       console.log(this.state.authors);\r\n       console.log(this.state.description);\r\n       console.log(this.state.avg_rating);\r\n     });\r\n  });\r\n}\r\n\r\n\r\n  render() {\r\n    const authors = this.state.authors.map(author =>\r\n        <div className=\"authorName\">{author.author[0].name}</div>\r\n    )\r\n    console.log(\r\n      \"getting the information for book id : \" + parseInt(this.props.match.params.info)\r\n    );\r\n    return (\r\n    <div className=\"BookInformation\">\r\n      <div className=\"Description\">\r\n        {this.state.description}\r\n      </div>\r\n      <div className=\"Authors\">\r\n        {authors}\r\n      </div>\r\n      <div className=\"AvgRating\">\r\n        {this.state.avg_rating}\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default BookInfo;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from './SearchBox';\nimport ListBooks from './ListBooks';\nimport BookInfo from './BookInfo';\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render () {\n    return (\n          <Router>\n            <div>\n              <div className=\"rowspan 12\">\n                <SearchBox/>\n              </div>\n\n              <Route path=\"/listBooks/:info\" component = {ListBooks}   />\n              <Route path=\"/bookDetails/:info\" component = {BookInfo}   />\n\n            </div>\n          </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}